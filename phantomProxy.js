// Generated by CoffeeScript 1.6.3
(function() {
  var client, macther, phantom, redis, requestPage;

  redis = require('redis');

  client = redis.createClient();

  phantom = require('node-phantom');

  macther = /(googlebot|bingbot|baiduspider|slurp|bingpreview|msnbot)/gi;

  client.on('ready', function() {
    return console.info('Redis Ready');
  });

  client.on('error', function(err) {
    return console.error("Redis Error: " + err);
  });

  requestPage = function(url, res) {
    var ex;
    try {
      return client.get(url, function(err, html) {
        if (err) {
          throw err;
        }
        if (html != null) {
          return res.end(html);
        }
        return phantom.create(function(err, ph) {
          if (err) {
            throw err;
          }
          return ph.createPage(function(err, page) {
            if (err) {
              throw err;
            }
            return page.open(url, function(err, status) {
              if (err) {
                throw err;
              }
              return page.evaluate(function() {
                return {
                  body: document.body.outerHTML,
                  head: document.head.outerHTML
                };
              }, function(err, result) {
                if (err) {
                  throw err;
                }
                html = "<!DOCTYPE html><html>" + result.head + result.body + "</html>";
                client.set(url, html, redis.print);
                return res.end(html);
              });
            });
          });
        });
      });
    } catch (_error) {
      ex = _error;
      return console.error(ex);
    }
  };

  process.on('exit', function() {
    var _i, _len, _results;
    _results = [];
    for (_i = 0, _len = phantoms.length; _i < _len; _i++) {
      phantom = phantoms[_i];
      _results.push(phantom.exit());
    }
    return _results;
  });

  exports.setMatcher = function(newMatcher) {
    var matcher;
    if (newMatcher.constructor !== RegExp) {
      return false;
    }
    matcher = newMatcher;
    return true;
  };

  exports.listen = function(req, res, next) {
    if (req.headers['user-agent'].match(matcher) !== null) {
      return requestPage("" + req.protocol + "://" + req.host + req.host, res);
    } else {
      return next();
    }
  };

}).call(this);
